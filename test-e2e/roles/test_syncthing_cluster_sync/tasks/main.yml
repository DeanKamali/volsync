---

- name: Check for required variables
  fail: msg="Variable {{ var_check }} must be defined to use this role"
  when: vars[var_check] is undefined
  with_items:
    - namespaces
    - num_syncthings
  loop_control:
    loop_var: var_check

- name: Check for 1 namespace per syncthing
  fail: msg="num_namespaces must be >= num_syncthings to use this role"
  when: (namespaces | length) < num_syncthings

- include_role:
    name: enable_privileged_mover
  when: privileged
  loop: "{{ namespaces }}"
  loop_control:
    loop_var: namespace

- name: Build list of syncthings
  set_fact:
    syncthings: "{{ syncthings | default([]) + [{ 'Name': 'test-%s' | format(item), 'Namespace': namespaces[item] }] }}"
  loop: "{{ range(0, num_syncthings) | list }}"

- name: Create data PVCs
  kubernetes.core.k8s:
    state: present
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: "{{ item.Name }}"
        namespace: "{{ item.Namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  with_items: "{{ syncthings }}"

- name: Create Syncthings (w/ mSC)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: volsync.backube/v1alpha1
      kind: ReplicationSource
      metadata:
        name: "{{ item.Name }}"
        namespace: "{{ item.Namespace }}"
      spec:
        sourcePVC: "{{ item.Name }}"
        syncthing:
          serviceType: ClusterIP
          moverSecurityContext: "{{ podSecurityContext }}"
  with_items: "{{ syncthings }}"
  when: podSecurityContext is defined

- name: Create Syncthings (w/o mSC)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: volsync.backube/v1alpha1
      kind: ReplicationSource
      metadata:
        name: "{{ item.Name }}"
        namespace: "{{ item.Namespace }}"
      spec:
        sourcePVC: "{{ item.Name }}"
        syncthing:
          serviceType: ClusterIP
  with_items: "{{ syncthings }}"
  when: podSecurityContext is not defined

- name: Wait for Syncthings to be ready
  kubernetes.core.k8s_info:
    api_version: volsync.backube/v1alpha1
    kind: ReplicationSource
    name: "{{ item.Name }}"
    namespace: "{{ item.Namespace }}"
  register: res
  until: >
    res.resources | length > 0 and
    res.resources[0].status.syncthing is defined and
    res.resources[0].status.syncthing.address is defined and
    res.resources[0].status.syncthing.ID is defined
  with_items: "{{ syncthings }}"
  delay: 5
  retries: 60

- name: Check syncthing movers are privileged
  include_role:
    name: mover_pod_is_privileged
  vars:
    component: "syncthing-mover"
  loop: "{{ syncthings | map(attribute='Namespace') | list }}"
  loop_control:
    loop_var: namespace

# Loop over all "syncthings", calling connect on each possible pair
- name: Peer Syncthings to each other
  include_tasks:
    file: connect.yml
  loop: "{{ syncthings | ansible.builtin.combinations(2) | list }}"
  loop_control:
    loop_var: instances

- name: Wait for instances to connect
  include_tasks:
    file: await_connected.yml
  loop: "{{ syncthings | ansible.builtin.combinations(2) | list }}"
  loop_control:
    loop_var: instances

- name: Write data into first PVC
  include_role:
    name: write_to_pvc
  vars:
    data: 'hello from syncthing-1'
    path: /testdata.txt
    pvc_name: "{{ syncthings[0].Name }}"
    namespace: "{{ syncthings[0].Namespace }}"

- name: Ensure data was synchronized to other instances
  include_role:
    name: pvc_has_data
  vars:
    data: 'hello from syncthing-1'
    path: /testdata.txt
    pvc_name: "{{ item.Name }}"
    namespace: "{{ item.Namespace }}"
    timeout: 300
  loop: "{{ syncthings[1:] }}"

- name: Kill all syncthing pod instances
  include_tasks:
    file: kill_pods_by_label.yml
  loop: "{{ syncthings | map(attribute='Namespace') | list }}"
  loop_control:
    loop_var: st_namespace

- name: Wait for instances to reconnect
  include_tasks:
    file: await_connected.yml
  loop: "{{ syncthings | ansible.builtin.combinations(2) | list }}"
  loop_control:
    loop_var: instances
